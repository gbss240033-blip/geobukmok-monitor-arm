import cv2
import mediapipe as mp
import RPi.GPIO as GPIO
from time import sleep

# ----------------------------
# üîß Motor Setup
# ----------------------------
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
Ena, In1, In2 = 2, 3, 4
GPIO.setup(Ena, GPIO.OUT)
GPIO.setup(In1, GPIO.OUT)
GPIO.setup(In2, GPIO.OUT)

pwm = GPIO.PWM(Ena, 100)  # 100Hz PWM frequency
pwm.start(0)

def motor_forward(speed=50, duration=1):
    """Rotate motor forward for a given duration (in seconds)."""
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.HIGH)
    pwm.ChangeDutyCycle(speed)
    sleep(duration)
    motor_stop()

def motor_stop():
    """Stop motor rotation."""
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.LOW)
    pwm.ChangeDutyCycle(0)

# ----------------------------
# üßç Pose Detection Setup
# ----------------------------
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

cap = cv2.VideoCapture(0)

baseline_distance = None
THRESHOLD_RATIO = 0.8
STABLE_COUNT = 0
STABLE_THRESHOLD = 5

# ----------------------------
# ‚öôÔ∏è Motor Movement Limit
# ----------------------------
MAX_MOVES = 5   # üî∏ Limit for motor activations (k)
move_count = 0  # üîπ Tracks how many times motor has been activated

print("üì∑ Initializing camera... Please keep your posture straight for calibration.")

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Unable to read camera frame.")
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb_frame)

    if results.pose_landmarks:
        landmarks = results.pose_landmarks.landmark
        nose = landmarks[mp_pose.PoseLandmark.NOSE]
        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER]

        shoulder_center_y = (left_shoulder.y + right_shoulder.y) / 2
        distance = shoulder_center_y - nose.y

        if baseline_distance is None:
            baseline_distance = distance
            print("‚úÖ Baseline posture saved!")
        else:
            ratio = distance / baseline_distance

            if ratio < THRESHOLD_RATIO:
                STABLE_COUNT += 1
                cv2.putText(frame, "‚ö†Ô∏è Forward Head Detected!", (50, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                print(f"‚ö†Ô∏è Forward head detected ({STABLE_COUNT}/{STABLE_THRESHOLD})")

                if STABLE_COUNT >= STABLE_THRESHOLD:
                    if move_count < MAX_MOVES:
                        print(f"üü¢ Moving monitor arm (Move #{move_count+1}/{MAX_MOVES})")
                        motor_forward(speed=50, duration=1)
                        move_count += 1
                    else:
                        print("üî¥ Movement limit reached ‚Äî no further motion.")
                    STABLE_COUNT = 0
            else:
                STABLE_COUNT = 0
                cv2.putText(frame, "üòä Good posture!", (50, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                motor_stop()

        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

    cv2.imshow("Posture Detection", frame)
    if cv2.waitKey(10) & 0xFF == 27:
        break

# ----------------------------
# üßπ Cleanup
# ----------------------------
cap.release()
motor_stop()
pwm.stop()
GPIO.cleanup()
cv2.destroyAllWindows()
print("Program terminated.")
