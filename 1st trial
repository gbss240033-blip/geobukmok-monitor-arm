import cv2
import mediapipe as mp
import RPi.GPIO as GPIO
from time import sleep

# ----------------------------
# üîß Motor Configuration
# ----------------------------
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
Ena, In1, In2 = 2, 3, 4
GPIO.setup(Ena, GPIO.OUT)
GPIO.setup(In1, GPIO.OUT)
GPIO.setup(In2, GPIO.OUT)

pwm = GPIO.PWM(Ena, 100)  # PWM frequency: 100Hz
pwm.start(0)

def motor_forward(speed=50):
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.HIGH)
    pwm.ChangeDutyCycle(speed)

def motor_stop():
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.LOW)
    pwm.ChangeDutyCycle(0)

# ----------------------------
# üéØ Mediapipe Pose Initialization
# ----------------------------
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

cap = cv2.VideoCapture(0)

baseline_distance = None
THRESHOLD_RATIO = 0.8     # If smaller than this ratio, forward head posture detected
STABLE_COUNT = 0           # Count of continuous frames with bad posture
STABLE_THRESHOLD = 5       # Trigger motor after N consecutive frames

print("üì∑ Initializing camera... Please sit straight to set the baseline posture.")

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Failed to read frame from camera.")
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb_frame)

    if results.pose_landmarks:
        landmarks = results.pose_landmarks.landmark

        # Extract key points
        nose = landmarks[mp_pose.PoseLandmark.NOSE]
        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER]

        # Calculate the midpoint of shoulders
        shoulder_center_y = (left_shoulder.y + right_shoulder.y) / 2

        # Distance between nose and shoulder line
        distance = shoulder_center_y - nose.y

        # Set baseline posture distance
        if baseline_distance is None:
            baseline_distance = distance
            print("‚úÖ Baseline posture saved!")
        else:
            ratio = distance / baseline_distance

            if ratio < THRESHOLD_RATIO:
                STABLE_COUNT += 1
                cv2.putText(frame, "‚ö†Ô∏è Forward Head Detected!", (50, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                print(f"‚ö†Ô∏è Forward head detected ({STABLE_COUNT}/{STABLE_THRESHOLD})")

                # Activate motor if poor posture persists
                if STABLE_COUNT >= STABLE_THRESHOLD:
                    print("üü¢ Motor activated (lifting monitor arm)")
                    motor_forward(50)
                    sleep(1)
                    motor_stop()
                    STABLE_COUNT = 0  # Reset counter
            else:
                STABLE_COUNT = 0
                cv2.putText(frame, "üòä Good posture!", (50, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                motor_stop()

        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

    cv2.imshow("Posture Detection", frame)
    if cv2.waitKey(10) & 0xFF == 27:  # ESC key to exit
        break

# ----------------------------
# üßπ Cleanup
# ----------------------------
cap.release()
motor_stop()
pwm.stop()
GPIO.cleanup()
cv2.destroyAllWindows()
print("Program terminated.")
