import cv2
import mediapipe as mp
import RPi.GPIO as GPIO
from time import sleep, time

# ----------------------------
# Motor Setup
# ----------------------------
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
Ena, In1, In2 = 2, 3, 4
GPIO.setup(Ena, GPIO.OUT)
GPIO.setup(In1, GPIO.OUT)
GPIO.setup(In2, GPIO.OUT)

pwm = GPIO.PWM(Ena, 100)  # 100Hz PWM frequency
pwm.start(0)

def motor_forward(speed=50, duration=1):
    """Rotate motor forward (lift monitor arm)."""
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.HIGH)
    pwm.ChangeDutyCycle(speed)
    sleep(duration)
    motor_stop()

def motor_backward(speed=50, duration=1):
    """Rotate motor backward (lower monitor arm)."""
    GPIO.output(In1, GPIO.HIGH)
    GPIO.output(In2, GPIO.LOW)
    pwm.ChangeDutyCycle(speed)
    sleep(duration)
    motor_stop()

def motor_stop():
    """Stop motor rotation."""
    GPIO.output(In1, GPIO.LOW)
    GPIO.output(In2, GPIO.LOW)
    pwm.ChangeDutyCycle(0)

# ----------------------------
# Pose Detection Setup
# ----------------------------
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)
cap = cv2.VideoCapture(0)

# ----------------------------
# Parameters
# ----------------------------
baseline_distance = None
THRESHOLD_RATIO = 0.8
RECOVER_RATIO = 0.95
BAD_STABLE_THRESHOLD = 5
GOOD_STABLE_THRESHOLD = 15

MAX_MOVES = 5
current_position = 0

MOTOR_STEP_DURATION = 1.0
MOTOR_SPEED = 50

bad_count = 0
good_count = 0
last_move_time = 0
MIN_INTERVAL_BETWEEN_MOVES = 0.8

print("üì∑ Initializing camera... Please keep your posture straight for calibration.")

try:
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("‚ùå Unable to read camera frame.")
            break

        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = pose.process(rgb_frame)

        if results.pose_landmarks:
            landmarks = results.pose_landmarks.landmark
            nose = landmarks[mp_pose.PoseLandmark.NOSE]
            left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
            right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER]

            shoulder_center_y = (left_shoulder.y + right_shoulder.y) / 2.0
            distance = shoulder_center_y - nose.y

            if baseline_distance is None:
                baseline_distance = distance
                print("‚úÖ Baseline posture saved! Please maintain good posture.")
                continue

            ratio = distance / baseline_distance if baseline_distance != 0 else 1.0

            # --- BAD posture (forward head)
            if ratio < THRESHOLD_RATIO:
                bad_count += 1
                good_count = 0
                print(f"‚ö†Ô∏è Forward head detected ({bad_count}/{BAD_STABLE_THRESHOLD})")

                if bad_count >= BAD_STABLE_THRESHOLD:
                    now = time()
                    if current_position < MAX_MOVES and (now - last_move_time) > MIN_INTERVAL_BETWEEN_MOVES:
                        print(f"üü¢ Moving monitor arm UP: {current_position} ‚Üí {current_position + 1}")
                        motor_forward(speed=MOTOR_SPEED, duration=MOTOR_STEP_DURATION)
                        current_position += 1
                        last_move_time = time()
                    elif current_position >= MAX_MOVES:
                        print("üî¥ Reached upper movement limit. No more upward motion.")
                    bad_count = 0

            # --- GOOD posture (recovered)
            elif ratio >= RECOVER_RATIO:
                good_count += 1
                bad_count = 0
                print(f"üòä Good posture maintained ({good_count}/{GOOD_STABLE_THRESHOLD})")

                if good_count >= GOOD_STABLE_THRESHOLD:
                    now = time()
                    if current_position > 0 and (now - last_move_time) > MIN_INTERVAL_BETWEEN_MOVES:
                        print(f"üîµ Moving monitor arm DOWN: {current_position} ‚Üí {current_position - 1}")
                        motor_backward(speed=MOTOR_SPEED, duration=MOTOR_STEP_DURATION)
                        current_position -= 1
                        last_move_time = time()
                    elif current_position == 0:
                        print("‚ÑπÔ∏è Already at lowest position.")
                    good_count = 0

            else:
                # Neutral zone
                bad_count = 0
                good_count = 0
                print("üü° Neutral posture (no movement)")

        else:
            bad_count = 0
            good_count = 0
            print("‚ùó No person detected ‚Äî waiting...")

        # Small delay to avoid spamming logs
        sleep(0.2)

except KeyboardInterrupt:
    print("üõë Interrupted by user.")

finally:
    cap.release()
    motor_stop()
    pwm.stop()
    GPIO.cleanup()
    print("Program terminated safely.")
